How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  It shows the difference between the two versions, which helps spot the mistake
  that was made. Anything that was added in the newer file had a plus sign next
  to it, and anything that was removed in the newer file had a subtract sign.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you want to revert a change you made to a file, you can go back to the
    history of the file and look at the past version that you want.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros of manually choosing when to create a commit is that each commit
    represents a logical change. However, a con would be that sometimes the user
    commits too much or doesn't commit enough times. Having versions automatically
    saved would help especially if the user doesn't create enough commits, but it
    can often save changes that make no sense or are not logical.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git allows saving multiple files in one commit because these files might be
    related to each other (for example, if the files together make up a webpage).
    If one thing is added in one of the files, it might affect the other file,
    so it is better to track the files together rather than separately.

How can you use the commands git log and git diff to view the history of files?

    You use git log to view the ID of the commits you made. After finding two IDs
    of two commits, you can view the difference between the two commits by using
    git diff.

How might using version control make you more confident to make changes that
could break something?

    You can always return to a commit that you made and see where the bug was
    introduced. Then you can use git diff to see where the mistake is and correct
    it in the current version.

Now that you have your workspace set up, what do you want to try using Git for?

    I would want to use Git to be able to compare different versions of one file
    and be able to correct mistakes easily by figuring out which version has the
    mistake. This would make it easier for me to make huge changes without worrying
    about making typos or other mistakes.
